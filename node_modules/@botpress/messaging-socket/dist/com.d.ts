import { Emitter, uuid } from '@botpress/messaging-base';
import io from 'socket.io-client';
import { UserCredentials } from './socket';
declare type Query = NonNullable<Parameters<typeof io>[1]>['query'];
export declare class SocketCom {
    private url;
    readonly events: SocketComWatcher;
    private emitter;
    private socket;
    private pending;
    constructor(url: string);
    connect(auth: {
        clientId: uuid;
        creds?: UserCredentials;
    }, query?: Query): Promise<UserCredentials>;
    disconnect(): void;
    request<T>(type: string, data: any): Promise<T>;
    private random;
}
export declare enum SocketComEvents {
    Message = "message"
}
export interface SocketComMessageEvent {
    type: string;
    data: any;
}
export declare class SocketComEmitter extends Emitter<{
    [SocketComEvents.Message]: SocketComMessageEvent;
}> {
}
export declare type SocketComWatcher = Omit<SocketComEmitter, 'emit'>;
export {};
