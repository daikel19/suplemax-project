"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessagingSocket = void 0;
const com_1 = require("./com");
const emitter_1 = require("./emitter");
class MessagingSocket extends emitter_1.SocketEmitter {
    constructor(options) {
        super();
        this.clientId = options.clientId;
        this.com = new com_1.SocketCom(options.url);
        this.com.events.on(com_1.SocketComEvents.Message, (e) => __awaiter(this, void 0, void 0, function* () {
            if (e.type === 'message.new') {
                yield this.emit('message', e.data.message);
            }
        }));
    }
    get creds() {
        return this._creds;
    }
    get userId() {
        var _a;
        return (_a = this._creds) === null || _a === void 0 ? void 0 : _a.userId;
    }
    get conversationId() {
        return this._conversationId;
    }
    connect(creds, userData) {
        return __awaiter(this, void 0, void 0, function* () {
            const query = userData ? { userData: JSON.stringify(userData) } : undefined;
            const result = yield this.com.connect({ clientId: this.clientId, creds }, query);
            if (result.userId === (creds === null || creds === void 0 ? void 0 : creds.userId) && !result.userToken) {
                result.userToken = creds.userToken;
            }
            this._creds = result;
            yield this.emit('connect', this._creds);
            yield this.emit('user', this._creds.userId);
            return result;
        });
    }
    disconnect() {
        return __awaiter(this, void 0, void 0, function* () {
            this.com.disconnect();
            yield this.emit('disconnect', undefined);
        });
    }
    getUser() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('users.get', {});
        });
    }
    switchConversation(id) {
        return __awaiter(this, void 0, void 0, function* () {
            this._conversationId = id;
            yield this.emit('conversation', this._conversationId);
        });
    }
    createConversation(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const conversation = yield this.request('conversations.create', {});
            if ((options === null || options === void 0 ? void 0 : options.switch) !== false) {
                yield this.switchConversation(conversation.id);
            }
            return conversation;
        });
    }
    startConversation(id) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.request('conversations.start', { id: id || this._conversationId });
        });
    }
    getConversation(id) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('conversations.get', {
                id: id || this._conversationId
            });
        });
    }
    deleteConversation(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const deleted = yield this.request('conversations.delete', {
                id: id || this._conversationId
            });
            if (deleted) {
                yield this.switchConversation(undefined);
            }
            return deleted;
        });
    }
    listConversations(limit) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('conversations.list', {
                limit: limit || 20
            });
        });
    }
    sendText(text) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('messages.create', {
                conversationId: this._conversationId,
                payload: { type: 'text', text }
            });
        });
    }
    sendPayload(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('messages.create', {
                conversationId: this._conversationId,
                payload
            });
        });
    }
    listMessages(limit) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('messages.list', {
                conversationId: this._conversationId,
                limit: limit || 20
            });
        });
    }
    sendFeedback(messageId, feedback) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.request('messages.feedback', {
                messageId,
                feedback
            });
        });
    }
    request(type, data) {
        return this.com.request(type, data);
    }
}
exports.MessagingSocket = MessagingSocket;
