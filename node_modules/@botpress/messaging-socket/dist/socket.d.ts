import { Conversation, Message, User, uuid } from '@botpress/messaging-base';
import { SocketEmitter } from './emitter';
export declare type UserData = Record<string, string>;
export declare class MessagingSocket extends SocketEmitter<{
    connect: UserCredentials;
    disconnect: undefined;
    user: uuid | undefined;
    conversation: uuid | undefined;
    message: Message;
}> {
    readonly clientId: uuid;
    get creds(): UserCredentials | undefined;
    get userId(): string | undefined;
    get conversationId(): string | undefined;
    private readonly com;
    private _creds;
    private _conversationId;
    constructor(options: MessagingSocketOptions);
    connect(creds?: UserCredentials, userData?: UserData): Promise<UserCredentials>;
    disconnect(): Promise<void>;
    getUser(): Promise<User | undefined>;
    switchConversation(id?: uuid): Promise<void>;
    createConversation(options?: {
        switch: boolean;
    }): Promise<Conversation>;
    startConversation(id?: uuid): Promise<void>;
    getConversation(id?: uuid): Promise<Conversation | undefined>;
    deleteConversation(id?: uuid): Promise<boolean>;
    listConversations(limit?: number): Promise<Conversation[]>;
    sendText(text: string): Promise<Message>;
    sendPayload(payload: any): Promise<Message>;
    listMessages(limit?: number): Promise<Message[]>;
    sendFeedback(messageId: uuid, feedback: number): Promise<void>;
    protected request<T>(type: string, data: any): Promise<T>;
}
export interface MessagingSocketOptions {
    url: string;
    clientId: uuid;
}
export interface UserCredentials {
    userId: uuid;
    userToken: string;
}
