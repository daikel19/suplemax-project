import type { MessageCreated } from './messageCreated.t';
import type { WebchatVisibility } from './webchatVisibility.t';
import type { WebchatConfig } from './webchatConfig.t';
import type { Custom } from './custom.t';
export declare const zod: {
    messageCreated: import("zod").ZodObject<{
        type: import("zod").ZodLiteral<"message_created">;
        data: import("zod").ZodObject<{
            id: import("zod").ZodString;
            createdAt: import("zod").ZodString;
            payload: import("zod").ZodUnion<[import("zod").ZodObject<{
                audioUrl: import("zod").ZodString;
                className: import("zod").ZodOptional<import("zod").ZodString>;
                type: import("zod").ZodLiteral<"audio">;
            }, "strip", import("zod").ZodTypeAny, {
                type: "audio";
                audioUrl: string;
                className?: string | undefined;
            }, {
                type: "audio";
                audioUrl: string;
                className?: string | undefined;
            }>, import("zod").ZodObject<{
                title: import("zod").ZodString;
                subtitle: import("zod").ZodOptional<import("zod").ZodString>;
                imageUrl: import("zod").ZodOptional<import("zod").ZodString>;
                actions: import("zod").ZodArray<import("zod").ZodObject<{
                    action: import("zod").ZodEnum<["postback", "url", "say"]>;
                    label: import("zod").ZodString;
                    value: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    value: string;
                    action: "url" | "postback" | "say";
                    label: string;
                }, {
                    value: string;
                    action: "url" | "postback" | "say";
                    label: string;
                }>, "many">;
                type: import("zod").ZodLiteral<"card">;
                className: import("zod").ZodOptional<import("zod").ZodString>;
            }, "strip", import("zod").ZodTypeAny, {
                title: string;
                type: "card";
                actions: {
                    value: string;
                    action: "url" | "postback" | "say";
                    label: string;
                }[];
                subtitle?: string | undefined;
                imageUrl?: string | undefined;
                className?: string | undefined;
            }, {
                title: string;
                type: "card";
                actions: {
                    value: string;
                    action: "url" | "postback" | "say";
                    label: string;
                }[];
                subtitle?: string | undefined;
                imageUrl?: string | undefined;
                className?: string | undefined;
            }>, import("zod").ZodObject<{
                items: import("zod").ZodArray<import("zod").ZodObject<{
                    title: import("zod").ZodString;
                    subtitle: import("zod").ZodOptional<import("zod").ZodString>;
                    imageUrl: import("zod").ZodOptional<import("zod").ZodString>;
                    actions: import("zod").ZodArray<import("zod").ZodObject<{
                        action: import("zod").ZodEnum<["postback", "url", "say"]>;
                        label: import("zod").ZodString;
                        value: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        value: string;
                        action: "url" | "postback" | "say";
                        label: string;
                    }, {
                        value: string;
                        action: "url" | "postback" | "say";
                        label: string;
                    }>, "many">;
                    className: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    title: string;
                    actions: {
                        value: string;
                        action: "url" | "postback" | "say";
                        label: string;
                    }[];
                    subtitle?: string | undefined;
                    imageUrl?: string | undefined;
                    className?: string | undefined;
                }, {
                    title: string;
                    actions: {
                        value: string;
                        action: "url" | "postback" | "say";
                        label: string;
                    }[];
                    subtitle?: string | undefined;
                    imageUrl?: string | undefined;
                    className?: string | undefined;
                }>, "many">;
                className: import("zod").ZodOptional<import("zod").ZodString>;
                type: import("zod").ZodLiteral<"carousel">;
            }, "strip", import("zod").ZodTypeAny, {
                type: "carousel";
                items: {
                    title: string;
                    actions: {
                        value: string;
                        action: "url" | "postback" | "say";
                        label: string;
                    }[];
                    subtitle?: string | undefined;
                    imageUrl?: string | undefined;
                    className?: string | undefined;
                }[];
                className?: string | undefined;
            }, {
                type: "carousel";
                items: {
                    title: string;
                    actions: {
                        value: string;
                        action: "url" | "postback" | "say";
                        label: string;
                    }[];
                    subtitle?: string | undefined;
                    imageUrl?: string | undefined;
                    className?: string | undefined;
                }[];
                className?: string | undefined;
            }>, import("zod").ZodObject<{
                text: import("zod").ZodString;
                options: import("zod").ZodArray<import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    value: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    value: string;
                    label: string;
                }, {
                    value: string;
                    label: string;
                }>, "many">;
                className: import("zod").ZodOptional<import("zod").ZodString>;
                type: import("zod").ZodLiteral<"choice">;
                disableFreeText: import("zod").ZodOptional<import("zod").ZodBoolean>;
            }, "strip", import("zod").ZodTypeAny, {
                options: {
                    value: string;
                    label: string;
                }[];
                type: "choice";
                text: string;
                className?: string | undefined;
                disableFreeText?: boolean | undefined;
            }, {
                options: {
                    value: string;
                    label: string;
                }[];
                type: "choice";
                text: string;
                className?: string | undefined;
                disableFreeText?: boolean | undefined;
            }>, import("zod").ZodObject<{
                text: import("zod").ZodString;
                options: import("zod").ZodArray<import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    value: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    value: string;
                    label: string;
                }, {
                    value: string;
                    label: string;
                }>, "many">;
                className: import("zod").ZodOptional<import("zod").ZodString>;
                type: import("zod").ZodLiteral<"dropdown">;
            }, "strip", import("zod").ZodTypeAny, {
                options: {
                    value: string;
                    label: string;
                }[];
                type: "dropdown";
                text: string;
                className?: string | undefined;
            }, {
                options: {
                    value: string;
                    label: string;
                }[];
                type: "dropdown";
                text: string;
                className?: string | undefined;
            }>, import("zod").ZodObject<{
                fileUrl: import("zod").ZodString;
                title: import("zod").ZodOptional<import("zod").ZodString>;
                className: import("zod").ZodOptional<import("zod").ZodString>;
                type: import("zod").ZodLiteral<"file">;
            }, "strip", import("zod").ZodTypeAny, {
                type: "file";
                fileUrl: string;
                title?: string | undefined;
                className?: string | undefined;
            }, {
                type: "file";
                fileUrl: string;
                title?: string | undefined;
                className?: string | undefined;
            }>, import("zod").ZodObject<{
                imageUrl: import("zod").ZodString;
                className: import("zod").ZodOptional<import("zod").ZodString>;
                type: import("zod").ZodLiteral<"image">;
            }, "strip", import("zod").ZodTypeAny, {
                type: "image";
                imageUrl: string;
                className?: string | undefined;
            }, {
                type: "image";
                imageUrl: string;
                className?: string | undefined;
            }>, import("zod").ZodObject<{
                latitude: import("zod").ZodNumber;
                longitude: import("zod").ZodNumber;
                address: import("zod").ZodOptional<import("zod").ZodString>;
                title: import("zod").ZodOptional<import("zod").ZodString>;
                className: import("zod").ZodOptional<import("zod").ZodString>;
                type: import("zod").ZodLiteral<"location">;
            }, "strip", import("zod").ZodTypeAny, {
                type: "location";
                latitude: number;
                longitude: number;
                address?: string | undefined;
                title?: string | undefined;
                className?: string | undefined;
            }, {
                type: "location";
                latitude: number;
                longitude: number;
                address?: string | undefined;
                title?: string | undefined;
                className?: string | undefined;
            }>, import("zod").ZodObject<{
                markdown: import("zod").ZodString;
                className: import("zod").ZodOptional<import("zod").ZodString>;
                type: import("zod").ZodLiteral<"markdown">;
            }, "strip", import("zod").ZodTypeAny, {
                type: "markdown";
                markdown: string;
                className?: string | undefined;
            }, {
                type: "markdown";
                markdown: string;
                className?: string | undefined;
            }>, import("zod").ZodObject<{
                text: import("zod").ZodString;
                className: import("zod").ZodOptional<import("zod").ZodString>;
                type: import("zod").ZodLiteral<"text">;
            }, "strip", import("zod").ZodTypeAny, {
                type: "text";
                text: string;
                className?: string | undefined;
            }, {
                type: "text";
                text: string;
                className?: string | undefined;
            }>, import("zod").ZodObject<{
                videoUrl: import("zod").ZodString;
                className: import("zod").ZodOptional<import("zod").ZodString>;
                type: import("zod").ZodLiteral<"video">;
            }, "strip", import("zod").ZodTypeAny, {
                type: "video";
                videoUrl: string;
                className?: string | undefined;
            }, {
                type: "video";
                videoUrl: string;
                className?: string | undefined;
            }>]>;
            userId: import("zod").ZodString;
            conversationId: import("zod").ZodString;
        }, "strip", import("zod").ZodTypeAny, {
            payload: {
                type: "audio";
                audioUrl: string;
                className?: string | undefined;
            } | {
                title: string;
                type: "card";
                actions: {
                    value: string;
                    action: "url" | "postback" | "say";
                    label: string;
                }[];
                subtitle?: string | undefined;
                imageUrl?: string | undefined;
                className?: string | undefined;
            } | {
                type: "carousel";
                items: {
                    title: string;
                    actions: {
                        value: string;
                        action: "url" | "postback" | "say";
                        label: string;
                    }[];
                    subtitle?: string | undefined;
                    imageUrl?: string | undefined;
                    className?: string | undefined;
                }[];
                className?: string | undefined;
            } | {
                options: {
                    value: string;
                    label: string;
                }[];
                type: "choice";
                text: string;
                className?: string | undefined;
                disableFreeText?: boolean | undefined;
            } | {
                options: {
                    value: string;
                    label: string;
                }[];
                type: "dropdown";
                text: string;
                className?: string | undefined;
            } | {
                type: "file";
                fileUrl: string;
                title?: string | undefined;
                className?: string | undefined;
            } | {
                type: "image";
                imageUrl: string;
                className?: string | undefined;
            } | {
                type: "location";
                latitude: number;
                longitude: number;
                address?: string | undefined;
                title?: string | undefined;
                className?: string | undefined;
            } | {
                type: "markdown";
                markdown: string;
                className?: string | undefined;
            } | {
                type: "text";
                text: string;
                className?: string | undefined;
            } | {
                type: "video";
                videoUrl: string;
                className?: string | undefined;
            };
            id: string;
            userId: string;
            conversationId: string;
            createdAt: string;
        }, {
            payload: {
                type: "audio";
                audioUrl: string;
                className?: string | undefined;
            } | {
                title: string;
                type: "card";
                actions: {
                    value: string;
                    action: "url" | "postback" | "say";
                    label: string;
                }[];
                subtitle?: string | undefined;
                imageUrl?: string | undefined;
                className?: string | undefined;
            } | {
                type: "carousel";
                items: {
                    title: string;
                    actions: {
                        value: string;
                        action: "url" | "postback" | "say";
                        label: string;
                    }[];
                    subtitle?: string | undefined;
                    imageUrl?: string | undefined;
                    className?: string | undefined;
                }[];
                className?: string | undefined;
            } | {
                options: {
                    value: string;
                    label: string;
                }[];
                type: "choice";
                text: string;
                className?: string | undefined;
                disableFreeText?: boolean | undefined;
            } | {
                options: {
                    value: string;
                    label: string;
                }[];
                type: "dropdown";
                text: string;
                className?: string | undefined;
            } | {
                type: "file";
                fileUrl: string;
                title?: string | undefined;
                className?: string | undefined;
            } | {
                type: "image";
                imageUrl: string;
                className?: string | undefined;
            } | {
                type: "location";
                latitude: number;
                longitude: number;
                address?: string | undefined;
                title?: string | undefined;
                className?: string | undefined;
            } | {
                type: "markdown";
                markdown: string;
                className?: string | undefined;
            } | {
                type: "text";
                text: string;
                className?: string | undefined;
            } | {
                type: "video";
                videoUrl: string;
                className?: string | undefined;
            };
            id: string;
            userId: string;
            conversationId: string;
            createdAt: string;
        }>;
    }, "strip", import("zod").ZodTypeAny, {
        type: "message_created";
        data: {
            payload: {
                type: "audio";
                audioUrl: string;
                className?: string | undefined;
            } | {
                title: string;
                type: "card";
                actions: {
                    value: string;
                    action: "url" | "postback" | "say";
                    label: string;
                }[];
                subtitle?: string | undefined;
                imageUrl?: string | undefined;
                className?: string | undefined;
            } | {
                type: "carousel";
                items: {
                    title: string;
                    actions: {
                        value: string;
                        action: "url" | "postback" | "say";
                        label: string;
                    }[];
                    subtitle?: string | undefined;
                    imageUrl?: string | undefined;
                    className?: string | undefined;
                }[];
                className?: string | undefined;
            } | {
                options: {
                    value: string;
                    label: string;
                }[];
                type: "choice";
                text: string;
                className?: string | undefined;
                disableFreeText?: boolean | undefined;
            } | {
                options: {
                    value: string;
                    label: string;
                }[];
                type: "dropdown";
                text: string;
                className?: string | undefined;
            } | {
                type: "file";
                fileUrl: string;
                title?: string | undefined;
                className?: string | undefined;
            } | {
                type: "image";
                imageUrl: string;
                className?: string | undefined;
            } | {
                type: "location";
                latitude: number;
                longitude: number;
                address?: string | undefined;
                title?: string | undefined;
                className?: string | undefined;
            } | {
                type: "markdown";
                markdown: string;
                className?: string | undefined;
            } | {
                type: "text";
                text: string;
                className?: string | undefined;
            } | {
                type: "video";
                videoUrl: string;
                className?: string | undefined;
            };
            id: string;
            userId: string;
            conversationId: string;
            createdAt: string;
        };
    }, {
        type: "message_created";
        data: {
            payload: {
                type: "audio";
                audioUrl: string;
                className?: string | undefined;
            } | {
                title: string;
                type: "card";
                actions: {
                    value: string;
                    action: "url" | "postback" | "say";
                    label: string;
                }[];
                subtitle?: string | undefined;
                imageUrl?: string | undefined;
                className?: string | undefined;
            } | {
                type: "carousel";
                items: {
                    title: string;
                    actions: {
                        value: string;
                        action: "url" | "postback" | "say";
                        label: string;
                    }[];
                    subtitle?: string | undefined;
                    imageUrl?: string | undefined;
                    className?: string | undefined;
                }[];
                className?: string | undefined;
            } | {
                options: {
                    value: string;
                    label: string;
                }[];
                type: "choice";
                text: string;
                className?: string | undefined;
                disableFreeText?: boolean | undefined;
            } | {
                options: {
                    value: string;
                    label: string;
                }[];
                type: "dropdown";
                text: string;
                className?: string | undefined;
            } | {
                type: "file";
                fileUrl: string;
                title?: string | undefined;
                className?: string | undefined;
            } | {
                type: "image";
                imageUrl: string;
                className?: string | undefined;
            } | {
                type: "location";
                latitude: number;
                longitude: number;
                address?: string | undefined;
                title?: string | undefined;
                className?: string | undefined;
            } | {
                type: "markdown";
                markdown: string;
                className?: string | undefined;
            } | {
                type: "text";
                text: string;
                className?: string | undefined;
            } | {
                type: "video";
                videoUrl: string;
                className?: string | undefined;
            };
            id: string;
            userId: string;
            conversationId: string;
            createdAt: string;
        };
    }>;
    webchatVisibility: import("zod").ZodObject<{
        type: import("zod").ZodLiteral<"webchat_visibility">;
        data: import("zod").ZodObject<{
            visibility: import("zod").ZodEnum<["show", "hide", "toggle"]>;
        }, "strip", import("zod").ZodTypeAny, {
            visibility: "show" | "hide" | "toggle";
        }, {
            visibility: "show" | "hide" | "toggle";
        }>;
    }, "strip", import("zod").ZodTypeAny, {
        type: "webchat_visibility";
        data: {
            visibility: "show" | "hide" | "toggle";
        };
    }, {
        type: "webchat_visibility";
        data: {
            visibility: "show" | "hide" | "toggle";
        };
    }>;
    webchatConfig: import("zod").ZodObject<{
        type: import("zod").ZodLiteral<"webchat_config">;
        data: import("zod").ZodObject<{
            config: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodAny>;
        }, "strip", import("zod").ZodTypeAny, {
            config: Record<string, any>;
        }, {
            config: Record<string, any>;
        }>;
    }, "strip", import("zod").ZodTypeAny, {
        type: "webchat_config";
        data: {
            config: Record<string, any>;
        };
    }, {
        type: "webchat_config";
        data: {
            config: Record<string, any>;
        };
    }>;
    custom: import("zod").ZodObject<{
        type: import("zod").ZodLiteral<"custom">;
        data: import("zod").ZodObject<{
            event: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodAny>;
        }, "strip", import("zod").ZodTypeAny, {
            event: Record<string, any>;
        }, {
            event: Record<string, any>;
        }>;
    }, "strip", import("zod").ZodTypeAny, {
        type: "custom";
        data: {
            event: Record<string, any>;
        };
    }, {
        type: "custom";
        data: {
            event: Record<string, any>;
        };
    }>;
};
export declare const json: {
    messageCreated: {
        type: string;
        properties: {
            type: {
                type: string;
                const: string;
            };
            data: {
                type: string;
                properties: {
                    id: {
                        type: string;
                    };
                    createdAt: {
                        type: string;
                        format: string;
                    };
                    payload: {
                        anyOf: ({
                            type: string;
                            properties: {
                                audioUrl: {
                                    type: string;
                                    minLength: number;
                                };
                                className: {
                                    type: string;
                                    description: string;
                                };
                                type: {
                                    type: string;
                                    const: string;
                                };
                                title?: undefined;
                                subtitle?: undefined;
                                imageUrl?: undefined;
                                actions?: undefined;
                                items?: undefined;
                                text?: undefined;
                                options?: undefined;
                                disableFreeText?: undefined;
                                fileUrl?: undefined;
                                latitude?: undefined;
                                longitude?: undefined;
                                address?: undefined;
                                markdown?: undefined;
                                videoUrl?: undefined;
                            };
                            required: string[];
                            additionalProperties: boolean;
                        } | {
                            type: string;
                            properties: {
                                title: {
                                    type: string;
                                    minLength: number;
                                };
                                subtitle: {
                                    type: string;
                                };
                                imageUrl: {
                                    type: string;
                                    minLength?: undefined;
                                };
                                actions: {
                                    type: string;
                                    items: {
                                        type: string;
                                        properties: {
                                            action: {
                                                type: string;
                                                enum: string[];
                                            };
                                            label: {
                                                type: string;
                                                minLength: number;
                                            };
                                            value: {
                                                type: string;
                                                minLength: number;
                                            };
                                        };
                                        required: string[];
                                        additionalProperties: boolean;
                                    };
                                };
                                type: {
                                    type: string;
                                    const: string;
                                };
                                className: {
                                    type: string;
                                    description: string;
                                };
                                audioUrl?: undefined;
                                items?: undefined;
                                text?: undefined;
                                options?: undefined;
                                disableFreeText?: undefined;
                                fileUrl?: undefined;
                                latitude?: undefined;
                                longitude?: undefined;
                                address?: undefined;
                                markdown?: undefined;
                                videoUrl?: undefined;
                            };
                            required: string[];
                            additionalProperties: boolean;
                        } | {
                            type: string;
                            properties: {
                                items: {
                                    type: string;
                                    items: {
                                        type: string;
                                        properties: {
                                            title: {
                                                type: string;
                                                minLength: number;
                                            };
                                            subtitle: {
                                                type: string;
                                            };
                                            imageUrl: {
                                                type: string;
                                            };
                                            actions: {
                                                type: string;
                                                items: {
                                                    type: string;
                                                    properties: {
                                                        action: {
                                                            type: string;
                                                            enum: string[];
                                                        };
                                                        label: {
                                                            type: string;
                                                            minLength: number;
                                                        };
                                                        value: {
                                                            type: string;
                                                            minLength: number;
                                                        };
                                                    };
                                                    required: string[];
                                                    additionalProperties: boolean;
                                                };
                                            };
                                            className: {
                                                type: string;
                                                description: string;
                                            };
                                        };
                                        required: string[];
                                        additionalProperties: boolean;
                                    };
                                };
                                className: {
                                    type: string;
                                    description: string;
                                };
                                type: {
                                    type: string;
                                    const: string;
                                };
                                audioUrl?: undefined;
                                title?: undefined;
                                subtitle?: undefined;
                                imageUrl?: undefined;
                                actions?: undefined;
                                text?: undefined;
                                options?: undefined;
                                disableFreeText?: undefined;
                                fileUrl?: undefined;
                                latitude?: undefined;
                                longitude?: undefined;
                                address?: undefined;
                                markdown?: undefined;
                                videoUrl?: undefined;
                            };
                            required: string[];
                            additionalProperties: boolean;
                        } | {
                            type: string;
                            properties: {
                                text: {
                                    type: string;
                                    minLength?: undefined;
                                };
                                options: {
                                    type: string;
                                    items: {
                                        type: string;
                                        properties: {
                                            label: {
                                                type: string;
                                                minLength: number;
                                            };
                                            value: {
                                                type: string;
                                                minLength: number;
                                            };
                                        };
                                        required: string[];
                                        additionalProperties: boolean;
                                    };
                                };
                                className: {
                                    type: string;
                                    description: string;
                                };
                                type: {
                                    type: string;
                                    const: string;
                                };
                                disableFreeText: {
                                    type: string;
                                };
                                audioUrl?: undefined;
                                title?: undefined;
                                subtitle?: undefined;
                                imageUrl?: undefined;
                                actions?: undefined;
                                items?: undefined;
                                fileUrl?: undefined;
                                latitude?: undefined;
                                longitude?: undefined;
                                address?: undefined;
                                markdown?: undefined;
                                videoUrl?: undefined;
                            };
                            required: string[];
                            additionalProperties: boolean;
                        } | {
                            type: string;
                            properties: {
                                text: {
                                    type: string;
                                    minLength?: undefined;
                                };
                                options: {
                                    type: string;
                                    items: {
                                        type: string;
                                        properties: {
                                            label: {
                                                type: string;
                                                minLength: number;
                                            };
                                            value: {
                                                type: string;
                                                minLength: number;
                                            };
                                        };
                                        required: string[];
                                        additionalProperties: boolean;
                                    };
                                };
                                className: {
                                    type: string;
                                    description: string;
                                };
                                type: {
                                    type: string;
                                    const: string;
                                };
                                audioUrl?: undefined;
                                title?: undefined;
                                subtitle?: undefined;
                                imageUrl?: undefined;
                                actions?: undefined;
                                items?: undefined;
                                disableFreeText?: undefined;
                                fileUrl?: undefined;
                                latitude?: undefined;
                                longitude?: undefined;
                                address?: undefined;
                                markdown?: undefined;
                                videoUrl?: undefined;
                            };
                            required: string[];
                            additionalProperties: boolean;
                        } | {
                            type: string;
                            properties: {
                                fileUrl: {
                                    type: string;
                                    minLength: number;
                                };
                                title: {
                                    type: string;
                                    minLength: number;
                                };
                                className: {
                                    type: string;
                                    description: string;
                                };
                                type: {
                                    type: string;
                                    const: string;
                                };
                                audioUrl?: undefined;
                                subtitle?: undefined;
                                imageUrl?: undefined;
                                actions?: undefined;
                                items?: undefined;
                                text?: undefined;
                                options?: undefined;
                                disableFreeText?: undefined;
                                latitude?: undefined;
                                longitude?: undefined;
                                address?: undefined;
                                markdown?: undefined;
                                videoUrl?: undefined;
                            };
                            required: string[];
                            additionalProperties: boolean;
                        } | {
                            type: string;
                            properties: {
                                imageUrl: {
                                    type: string;
                                    minLength: number;
                                };
                                className: {
                                    type: string;
                                    description: string;
                                };
                                type: {
                                    type: string;
                                    const: string;
                                };
                                audioUrl?: undefined;
                                title?: undefined;
                                subtitle?: undefined;
                                actions?: undefined;
                                items?: undefined;
                                text?: undefined;
                                options?: undefined;
                                disableFreeText?: undefined;
                                fileUrl?: undefined;
                                latitude?: undefined;
                                longitude?: undefined;
                                address?: undefined;
                                markdown?: undefined;
                                videoUrl?: undefined;
                            };
                            required: string[];
                            additionalProperties: boolean;
                        } | {
                            type: string;
                            properties: {
                                latitude: {
                                    type: string;
                                };
                                longitude: {
                                    type: string;
                                };
                                address: {
                                    type: string;
                                };
                                title: {
                                    type: string;
                                    minLength?: undefined;
                                };
                                className: {
                                    type: string;
                                    description: string;
                                };
                                type: {
                                    type: string;
                                    const: string;
                                };
                                audioUrl?: undefined;
                                subtitle?: undefined;
                                imageUrl?: undefined;
                                actions?: undefined;
                                items?: undefined;
                                text?: undefined;
                                options?: undefined;
                                disableFreeText?: undefined;
                                fileUrl?: undefined;
                                markdown?: undefined;
                                videoUrl?: undefined;
                            };
                            required: string[];
                            additionalProperties: boolean;
                        } | {
                            type: string;
                            properties: {
                                markdown: {
                                    type: string;
                                    minLength: number;
                                };
                                className: {
                                    type: string;
                                    description: string;
                                };
                                type: {
                                    type: string;
                                    const: string;
                                };
                                audioUrl?: undefined;
                                title?: undefined;
                                subtitle?: undefined;
                                imageUrl?: undefined;
                                actions?: undefined;
                                items?: undefined;
                                text?: undefined;
                                options?: undefined;
                                disableFreeText?: undefined;
                                fileUrl?: undefined;
                                latitude?: undefined;
                                longitude?: undefined;
                                address?: undefined;
                                videoUrl?: undefined;
                            };
                            required: string[];
                            additionalProperties: boolean;
                        } | {
                            type: string;
                            properties: {
                                text: {
                                    type: string;
                                    minLength: number;
                                };
                                className: {
                                    type: string;
                                    description: string;
                                };
                                type: {
                                    type: string;
                                    const: string;
                                };
                                audioUrl?: undefined;
                                title?: undefined;
                                subtitle?: undefined;
                                imageUrl?: undefined;
                                actions?: undefined;
                                items?: undefined;
                                options?: undefined;
                                disableFreeText?: undefined;
                                fileUrl?: undefined;
                                latitude?: undefined;
                                longitude?: undefined;
                                address?: undefined;
                                markdown?: undefined;
                                videoUrl?: undefined;
                            };
                            required: string[];
                            additionalProperties: boolean;
                        } | {
                            type: string;
                            properties: {
                                videoUrl: {
                                    type: string;
                                    minLength: number;
                                };
                                className: {
                                    type: string;
                                    description: string;
                                };
                                type: {
                                    type: string;
                                    const: string;
                                };
                                audioUrl?: undefined;
                                title?: undefined;
                                subtitle?: undefined;
                                imageUrl?: undefined;
                                actions?: undefined;
                                items?: undefined;
                                text?: undefined;
                                options?: undefined;
                                disableFreeText?: undefined;
                                fileUrl?: undefined;
                                latitude?: undefined;
                                longitude?: undefined;
                                address?: undefined;
                                markdown?: undefined;
                            };
                            required: string[];
                            additionalProperties: boolean;
                        })[];
                    };
                    userId: {
                        type: string;
                    };
                    conversationId: {
                        type: string;
                    };
                };
                required: string[];
                additionalProperties: boolean;
            };
        };
        required: string[];
        additionalProperties: boolean;
        $schema: string;
    };
    webchatVisibility: {
        type: string;
        properties: {
            type: {
                type: string;
                const: string;
            };
            data: {
                type: string;
                properties: {
                    visibility: {
                        type: string;
                        enum: string[];
                    };
                };
                required: string[];
                additionalProperties: boolean;
            };
        };
        required: string[];
        additionalProperties: boolean;
        $schema: string;
    };
    webchatConfig: {
        type: string;
        properties: {
            type: {
                type: string;
                const: string;
            };
            data: {
                type: string;
                properties: {
                    config: {
                        type: string;
                        additionalProperties: {};
                    };
                };
                required: string[];
                additionalProperties: boolean;
            };
        };
        required: string[];
        additionalProperties: boolean;
        $schema: string;
    };
    custom: {
        type: string;
        properties: {
            type: {
                type: string;
                const: string;
            };
            data: {
                type: string;
                properties: {
                    event: {
                        type: string;
                        additionalProperties: {};
                    };
                };
                required: string[];
                additionalProperties: boolean;
            };
        };
        required: string[];
        additionalProperties: boolean;
        $schema: string;
    };
};
export type Types = {
    messageCreated: MessageCreated;
    webchatVisibility: WebchatVisibility;
    webchatConfig: WebchatConfig;
    custom: Custom;
};
