export interface GetMessageRequestHeaders {
    "x-user-key": string;
}
export interface GetMessageRequestQuery {
}
export interface GetMessageRequestParams {
    id: string;
}
export interface GetMessageRequestBody {
}
export type GetMessageInput = GetMessageRequestBody & GetMessageRequestHeaders & GetMessageRequestQuery & GetMessageRequestParams;
export type GetMessageRequest = {
    headers: GetMessageRequestHeaders;
    query: GetMessageRequestQuery;
    params: GetMessageRequestParams;
    body: GetMessageRequestBody;
};
export declare const parseReq: (input: GetMessageInput) => GetMessageRequest & {
    path: string;
};
export interface GetMessageResponse {
    /**
     * The Message object represents a message in a [Conversation](#schema_conversation) for a specific [User](#schema_user).
     */
    message: {
        /**
         * Id of the [Message](#schema_message)
         */
        id: string;
        /**
         * Creation date of the [Message](#schema_message) in ISO 8601 format
         */
        createdAt: string;
        /**
         * Payload is the content type of the message.
         */
        payload: {
            audioUrl: string;
            /**
             * CSS className to apply to the message
             */
            className?: string;
            type: "audio";
        } | {
            title: string;
            subtitle?: string;
            imageUrl?: string;
            actions: {
                action: "postback" | "url" | "say";
                label: string;
                value: string;
            }[];
            type: "card";
            /**
             * CSS className to apply to the message
             */
            className?: string;
        } | {
            items: {
                title: string;
                subtitle?: string;
                imageUrl?: string;
                actions: {
                    action: "postback" | "url" | "say";
                    label: string;
                    value: string;
                }[];
                /**
                 * CSS className to apply to the message
                 */
                className?: string;
            }[];
            /**
             * CSS className to apply to the message
             */
            className?: string;
            type: "carousel";
        } | {
            text: string;
            options: {
                label: string;
                value: string;
            }[];
            /**
             * CSS className to apply to the message
             */
            className?: string;
            type: "choice";
            disableFreeText?: boolean;
        } | {
            text: string;
            options: {
                label: string;
                value: string;
            }[];
            /**
             * CSS className to apply to the message
             */
            className?: string;
            type: "dropdown";
        } | {
            fileUrl: string;
            title?: string;
            /**
             * CSS className to apply to the message
             */
            className?: string;
            type: "file";
        } | {
            imageUrl: string;
            /**
             * CSS className to apply to the message
             */
            className?: string;
            type: "image";
        } | {
            latitude: number;
            longitude: number;
            address?: string;
            title?: string;
            /**
             * CSS className to apply to the message
             */
            className?: string;
            type: "location";
        } | {
            markdown: string;
            /**
             * CSS className to apply to the message
             */
            className?: string;
            type: "markdown";
        } | {
            text: string;
            /**
             * CSS className to apply to the message
             */
            className?: string;
            type: "text";
        } | {
            videoUrl: string;
            /**
             * CSS className to apply to the message
             */
            className?: string;
            type: "video";
        };
        /**
         * ID of the [User](#schema_user)
         */
        userId: string;
        /**
         * ID of the [Conversation](#schema_conversation)
         */
        conversationId: string;
    };
}
