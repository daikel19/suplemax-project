import { type MessagingSocketOptions, type UserCredentials } from '@botpress/messaging-socket';
import { EventEmitter } from '../../utils';
import { Events, UserData, WebchatClient, type User } from '../types';
export type MessagingClientProps = MessagingSocketOptions;
export declare class MessagingClient implements WebchatClient {
    private socket;
    clientId: string;
    apiUrl: string;
    userId: string | undefined;
    conversationId: string | undefined;
    private userToken;
    private connected;
    private readonly emitter;
    on: EventEmitter<Events>['on'];
    constructor(options: MessagingClientProps);
    readonly mode = "messaging";
    connect(creds?: UserCredentials, data?: UserData): Promise<UserCredentials | undefined>;
    disconnect(): Promise<void>;
    getUser(): Promise<User>;
    updateUser(): Promise<User>;
    sendMessage(message: string): Promise<void>;
    sendEvent(event: Record<string, any>): Promise<void>;
    switchConversation(id: string): Promise<void>;
    conversationExists(id: string): Promise<boolean>;
    newConversation(): Promise<void>;
    listMessages(limit?: number): Promise<{
        payload: import("../../adapters/target").Message;
        disableInput: boolean | undefined;
        id: string;
        conversationId: string;
        authorId: string | undefined;
        sentOn: Date;
    }[]>;
}
